# 1 "kern/mach.server.defs.c"
# 1 "/root/gnumach-1.4//"
# 1 "<command-line>"
# 1 "./config.h" 1
# 1 "<command-line>" 2
# 1 "kern/mach.server.defs.c"
# 40 "kern/mach.server.defs.c"
# 1 "./include/mach/mach.defs" 1
# 33 "./include/mach/mach.defs"
subsystem




   KernelServer

         mach 2000;





# 1 "./include/mach/std_types.defs" 1
# 33 "./include/mach/std_types.defs"
type char = MACH_MSG_TYPE_CHAR;
type short = MACH_MSG_TYPE_INTEGER_16;
type int = MACH_MSG_TYPE_INTEGER_32;
type int32 = MACH_MSG_TYPE_INTEGER_32;
type int64 = MACH_MSG_TYPE_INTEGER_64;
type boolean_t = MACH_MSG_TYPE_BOOLEAN;
type unsigned = MACH_MSG_TYPE_INTEGER_32;
type unsigned32 = MACH_MSG_TYPE_INTEGER_32;
type unsigned64 = MACH_MSG_TYPE_INTEGER_64;


# 1 "./mach/machine/machine_types.defs" 1
# 50 "./mach/machine/machine_types.defs"
type natural_t = unsigned32;
# 59 "./mach/machine/machine_types.defs"
type integer_t = int32;
# 45 "./include/mach/std_types.defs" 2

type kern_return_t = int;

type pointer_t = ^array[] of MACH_MSG_TYPE_BYTE
 ctype: vm_offset_t;


type mach_port_t = MACH_MSG_TYPE_COPY_SEND;
type mach_port_array_t = array[] of mach_port_t;

type mach_port_name_t = MACH_MSG_TYPE_PORT_NAME
 ctype: mach_port_t;
type mach_port_name_array_t = array[] of mach_port_name_t
 ctype: mach_port_array_t;

type mach_port_right_t = natural_t;

type mach_port_type_t = natural_t;
type mach_port_type_array_t = array[] of mach_port_type_t;

type mach_port_urefs_t = natural_t;
type mach_port_delta_t = integer_t;
type mach_port_seqno_t = natural_t;
type mach_port_mscount_t = unsigned;
type mach_port_msgcount_t = unsigned;
type mach_port_rights_t = unsigned;
type mach_msg_id_t = integer_t;
type mach_msg_type_name_t = unsigned;
type mach_msg_type_number_t = natural_t;

type mach_port_move_receive_t = MACH_MSG_TYPE_MOVE_RECEIVE
 ctype: mach_port_t;
type mach_port_copy_send_t = MACH_MSG_TYPE_COPY_SEND
 ctype: mach_port_t;
type mach_port_make_send_t = MACH_MSG_TYPE_MAKE_SEND
 ctype: mach_port_t;
type mach_port_move_send_t = MACH_MSG_TYPE_MOVE_SEND
 ctype: mach_port_t;
type mach_port_make_send_once_t = MACH_MSG_TYPE_MAKE_SEND_ONCE
 ctype: mach_port_t;
type mach_port_move_send_once_t = MACH_MSG_TYPE_MOVE_SEND_ONCE
 ctype: mach_port_t;

type mach_port_receive_t = MACH_MSG_TYPE_PORT_RECEIVE
 ctype: mach_port_t;
type mach_port_send_t = MACH_MSG_TYPE_PORT_SEND
 ctype: mach_port_t;
type mach_port_send_once_t = MACH_MSG_TYPE_PORT_SEND_ONCE
 ctype: mach_port_t;

type mach_port_poly_t = polymorphic
 ctype: mach_port_t;

import <mach/std_types.h>;
# 47 "./include/mach/mach.defs" 2
# 1 "./include/mach/mach_types.defs" 1
# 61 "./include/mach/mach_types.defs"
type mach_port_status_t = struct[9] of integer_t;

type old_mach_port_status_t = struct[8] of integer_t;

type task_t = mach_port_t
  ctype: mach_port_t

  intran: task_t convert_port_to_task(mach_port_t)
  outtran: mach_port_t convert_task_to_port(task_t)
  destructor: task_deallocate(task_t)

  ;
# 85 "./include/mach/mach_types.defs"
type thread_t = mach_port_t
  ctype: mach_port_t

  intran: thread_t convert_port_to_thread(mach_port_t)
  outtran: mach_port_t convert_thread_to_port(thread_t)
  destructor: thread_deallocate(thread_t)

  ;

type thread_state_t = array[*:1024] of natural_t;

type task_array_t = ^array[] of task_t;
type thread_array_t = ^array[] of thread_t;

type vm_task_t = mach_port_t
  ctype: mach_port_t

  intran: vm_map_t convert_port_to_map(mach_port_t)
  destructor: vm_map_deallocate(vm_map_t)

  ;

type ipc_space_t = mach_port_t
  ctype: mach_port_t

  intran: ipc_space_t convert_port_to_space(mach_port_t)
  destructor: space_deallocate(ipc_space_t)

  ;

type vm_address_t = natural_t;
type vm_offset_t = natural_t;
type vm_size_t = natural_t;
type vm_prot_t = int;
type vm_inherit_t = int;
type vm_statistics_data_t = struct[13] of integer_t;
type vm_machine_attribute_t = int;
type vm_machine_attribute_val_t = int;

type thread_info_t = array[*:1024] of integer_t;
type thread_basic_info_data_t = struct[11] of integer_t;
type thread_sched_info_data_t = struct[7] of integer_t;

type task_info_t = array[*:1024] of integer_t;
type task_basic_info_data_t = struct[8] of integer_t;
type task_events_info = struct[7] of natural_t;
type task_thread_times_info_data_t = struct[4] of integer_t;


type memory_object_t = mach_port_t
  ctype: mach_port_t

  intran: ipc_port_t null_conversion(mach_port_t)

  ;

type memory_object_control_t = mach_port_t
  ctype: mach_port_t

  intran: vm_object_t vm_object_lookup(mach_port_t)

  ;

type memory_object_name_t = mach_port_t
  ctype: mach_port_t

  intran: vm_object_t vm_object_lookup_name(mach_port_t)
  destructor: vm_object_deallocate(vm_object_t)

  ;

type memory_object_copy_strategy_t = int;
type memory_object_return_t = int;

type machine_info_data_t = struct[5] of integer_t;
type machine_slot_data_t = struct[8] of integer_t;

type host_t = mach_port_t
  ctype: mach_port_t

  intran: host_t convert_port_to_host(mach_port_t)
  outtran: mach_port_t convert_host_to_port(host_t)

  ;

type host_priv_t = mach_port_t
  ctype: mach_port_t

  intran: host_t convert_port_to_host_priv(mach_port_t)

  ;

type host_info_t = array[*:1024] of integer_t;
type host_basic_info_data_t = struct[5] of integer_t;
type host_sched_info_data_t = struct[2] of integer_t;
type host_load_info_data_t = struct[6] of integer_t;


type processor_t = mach_port_t
  ctype: mach_port_t

  intran: processor_t convert_port_to_processor(mach_port_t)
  outtran: mach_port_t convert_processor_to_port(processor_t)

  ;

type processor_array_t = ^array[] of processor_t;
type processor_info_t = array[*:1024] of integer_t;
type processor_basic_info_data_t = struct[5] of integer_t;


type processor_set_t = mach_port_t
  ctype: mach_port_t

  intran: processor_set_t convert_port_to_pset(mach_port_t)
  outtran: mach_port_t convert_pset_to_port(processor_set_t)
  destructor: pset_deallocate(processor_set_t)

  ;

type processor_set_array_t = ^array[] of processor_set_t;

type processor_set_name_t = mach_port_t
  ctype: mach_port_t

  intran: processor_set_t convert_port_to_pset_name(mach_port_t)
  outtran: mach_port_t convert_pset_name_to_port(processor_set_t)
  destructor: pset_deallocate(processor_set_t)

  ;

type processor_set_name_array_t = ^array[] of processor_set_name_t;

type processor_set_info_t = array[*:1024] of integer_t;
type processor_set_basic_info_data_t = struct[5] of integer_t;
type processor_set_sched_info_data_t = struct[2] of integer_t;


type kernel_version_t = (MACH_MSG_TYPE_STRING, 512*8);

type kernel_boot_info_t = (MACH_MSG_TYPE_STRING, 4096*8);

type time_value_t = struct[2] of integer_t;

type emulation_vector_t = ^array[] of vm_offset_t;

type rpc_signature_info_t = array[*:1024] of int;


simport <kern/ipc_kobject.h>;
simport <kern/ipc_tt.h>;
simport <kern/ipc_host.h>;
simport <kern/task.h>;
simport <kern/thread.h>;
simport <kern/host.h>;
simport <kern/processor.h>;
simport <vm/vm_object.h>;
simport <vm/vm_map.h>;
simport <ipc/ipc_space.h>;


import <mach/mach_types.h>;
# 48 "./include/mach/mach.defs" 2

skip;
skip;
skip;
skip;
skip;
skip;
skip;






routine task_create(
  target_task : task_t;
  inherit_memory : boolean_t;
 out child_task : task_t);






routine task_terminate(
  target_task : task_t);





routine task_get_emulation_vector(
  task : task_t;
 out vector_start : int;
 out emulation_vector: emulation_vector_t);






routine task_set_emulation_vector(
  task : task_t;
  vector_start : int;
  emulation_vector: emulation_vector_t);





routine task_threads(
  target_task : task_t;
 out thread_list : thread_array_t);




routine task_info(
  target_task : task_t;
  flavor : int;
 out task_info_out : task_info_t, CountInOut);


skip;
skip;
skip;




routine thread_terminate(
  target_thread : thread_t);







routine thread_get_state(
  target_thread : thread_t;
  flavor : int;
 out old_state : thread_state_t, CountInOut);






routine thread_set_state(
  target_thread : thread_t;
  flavor : int;
  new_state : thread_state_t);




routine thread_info(
  target_thread : thread_t;
  flavor : int;
 out thread_info_out : thread_info_t, CountInOut);

skip;
# 162 "./include/mach/mach.defs"
routine vm_allocate(
  target_task : vm_task_t;
 inout address : vm_address_t;
  size : vm_size_t;
  anywhere : boolean_t);


skip;





routine vm_deallocate(
  target_task : vm_task_t;
  address : vm_address_t;
  size : vm_size_t);
# 190 "./include/mach/mach.defs"
routine vm_protect(
  target_task : vm_task_t;
  address : vm_address_t;
  size : vm_size_t;
  set_maximum : boolean_t;
  new_protection : vm_prot_t);
# 204 "./include/mach/mach.defs"
routine vm_inherit(
  target_task : vm_task_t;
  address : vm_address_t;
  size : vm_size_t;
  new_inheritance : vm_inherit_t);
# 217 "./include/mach/mach.defs"
routine vm_read(
  target_task : vm_task_t;
  address : vm_address_t;
  size : vm_size_t;
 out data : pointer_t);
# 230 "./include/mach/mach.defs"
routine vm_write(
  target_task : vm_task_t;
  address : vm_address_t;
  data : pointer_t);
# 245 "./include/mach/mach.defs"
routine vm_copy(
  target_task : vm_task_t;
  source_address : vm_address_t;
  size : vm_size_t;
  dest_address : vm_address_t);
# 262 "./include/mach/mach.defs"
routine vm_region(
  target_task : vm_task_t;
 inout address : vm_address_t;
 out size : vm_size_t;
 out protection : vm_prot_t;
 out max_protection : vm_prot_t;
 out inheritance : vm_inherit_t;
 out is_shared : boolean_t;

 out object_name : memory_object_name_t =
     MACH_MSG_TYPE_MOVE_SEND
     ctype: mach_port_t;
 out offset : vm_offset_t);






routine vm_statistics(
  target_task : vm_task_t;
 out vm_stats : vm_statistics_data_t);

skip;
skip;





routine mach_ports_register(
  target_task : task_t;
  init_port_set : mach_port_array_t =
     ^array[] of mach_port_t);




routine mach_ports_lookup(
  target_task : task_t;
 out init_port_set : mach_port_array_t =
     ^array[] of mach_port_t);

skip;
skip;
skip;
# 321 "./include/mach/mach.defs"
simpleroutine memory_object_data_provided(
  memory_control : memory_object_control_t;
  offset : vm_offset_t;
  data : pointer_t;
  lock_value : vm_prot_t);
# 335 "./include/mach/mach.defs"
simpleroutine memory_object_data_unavailable(
  memory_control : memory_object_control_t;
  offset : vm_offset_t;
  size : vm_size_t);





routine memory_object_get_attributes(
  memory_control : memory_object_control_t;
 out object_ready : boolean_t;
 out may_cache : boolean_t;
 out copy_strategy : memory_object_copy_strategy_t);







routine vm_set_default_memory_manager(
  host_priv : host_priv_t;
 inout default_manager : mach_port_make_send_t);

skip;
# 388 "./include/mach/mach.defs"
skip;

simpleroutine memory_object_lock_request(
  memory_control : memory_object_control_t;
  offset : vm_offset_t;
  size : vm_size_t;
  should_return : memory_object_return_t;
  should_flush : boolean_t;
  lock_value : vm_prot_t;
  reply_to : mach_port_t =
   MACH_MSG_TYPE_MAKE_SEND_ONCE|polymorphic);

skip;
skip;
skip;
skip;
skip;
skip;
skip;
skip;
skip;
skip;
skip;






routine task_suspend(
  target_task : task_t);







routine task_resume(
  target_task : task_t);





routine task_get_special_port(
  task : task_t;
  which_port : int;
 out special_port : mach_port_t);





routine task_set_special_port(
  task : task_t;
  which_port : int;
  special_port : mach_port_t);

skip;







routine thread_create(
  parent_task : task_t;
 out child_thread : thread_t);
# 467 "./include/mach/mach.defs"
routine thread_suspend(
  target_thread : thread_t);





routine thread_resume(
  target_thread : thread_t);
# 486 "./include/mach/mach.defs"
routine thread_abort(
  target_thread : thread_t);

skip;
skip;





routine thread_get_special_port(
  thread : thread_t;
  which_port : int;
 out special_port : mach_port_t);





routine thread_set_special_port(
  thread : thread_t;
  which_port : int;
  special_port : mach_port_t);

skip;





routine task_set_emulation(
  target_port : task_t;
  routine_entry_pt: vm_address_t;
  routine_number : int);







routine task_ras_control(
  target_task : task_t;
  basepc : vm_address_t;
  boundspc : vm_address_t;
  flavor : int);



skip;
skip;
skip;
skip;
skip;
skip;
skip;
skip;
skip;
skip;
skip;
skip;
skip;
skip;
skip;
skip;
skip;
# 598 "./include/mach/mach.defs"
routine vm_map(
  target_task : vm_task_t;
 inout address : vm_address_t;
  size : vm_size_t;
  mask : vm_address_t;
  anywhere : boolean_t;
  memory_object : memory_object_t;
  offset : vm_offset_t;
  copy : boolean_t;
  cur_protection : vm_prot_t;
  max_protection : vm_prot_t;
  inheritance : vm_inherit_t);
# 618 "./include/mach/mach.defs"
simpleroutine memory_object_data_error(
  memory_control : memory_object_control_t;
  offset : vm_offset_t;
  size : vm_size_t;
  error_value : kern_return_t);





simpleroutine memory_object_set_attributes(
  memory_control : memory_object_control_t;
  object_ready : boolean_t;
  may_cache : boolean_t;
  copy_strategy : memory_object_copy_strategy_t);



simpleroutine memory_object_destroy(
  memory_control : memory_object_control_t;
  reason : kern_return_t);
# 662 "./include/mach/mach.defs"
simpleroutine memory_object_data_supply(
  memory_control : memory_object_control_t;
  offset : vm_offset_t;
  data : pointer_t, Dealloc[];
  lock_value : vm_prot_t;
  precious : boolean_t;
  reply_to : mach_port_t =
   MACH_MSG_TYPE_MAKE_SEND_ONCE|polymorphic);

simpleroutine memory_object_ready(
  memory_control : memory_object_control_t;
  may_cache : boolean_t;
  copy_strategy : memory_object_copy_strategy_t);

simpleroutine memory_object_change_attributes(
  memory_control : memory_object_control_t;
  may_cache : boolean_t;
  copy_strategy : memory_object_copy_strategy_t;
  reply_to : mach_port_t =
   MACH_MSG_TYPE_MAKE_SEND_ONCE|polymorphic);

skip;
skip;
skip;






routine vm_machine_attribute(
  target_task : vm_task_t;
  address : vm_address_t;
  size : vm_size_t;
  attribute : vm_machine_attribute_t;
 inout value : vm_machine_attribute_val_t);

skip;
# 40 "kern/mach.server.defs.c" 2
