# 1 "kern/mach_host.server.defs.c"
# 1 "/root/gnumach-1.4//"
# 1 "<command-line>"
# 1 "./config.h" 1
# 1 "<command-line>" 2
# 1 "kern/mach_host.server.defs.c"
# 37 "kern/mach_host.server.defs.c"
# 1 "./include/mach/mach_host.defs" 1
# 37 "./include/mach/mach_host.defs"
subsystem

   KernelServer

         mach_host 2600;





# 1 "./include/mach/std_types.defs" 1
# 33 "./include/mach/std_types.defs"
type char = MACH_MSG_TYPE_CHAR;
type short = MACH_MSG_TYPE_INTEGER_16;
type int = MACH_MSG_TYPE_INTEGER_32;
type int32 = MACH_MSG_TYPE_INTEGER_32;
type int64 = MACH_MSG_TYPE_INTEGER_64;
type boolean_t = MACH_MSG_TYPE_BOOLEAN;
type unsigned = MACH_MSG_TYPE_INTEGER_32;
type unsigned32 = MACH_MSG_TYPE_INTEGER_32;
type unsigned64 = MACH_MSG_TYPE_INTEGER_64;


# 1 "./mach/machine/machine_types.defs" 1
# 50 "./mach/machine/machine_types.defs"
type natural_t = unsigned32;
# 59 "./mach/machine/machine_types.defs"
type integer_t = int32;
# 45 "./include/mach/std_types.defs" 2

type kern_return_t = int;

type pointer_t = ^array[] of MACH_MSG_TYPE_BYTE
 ctype: vm_offset_t;


type mach_port_t = MACH_MSG_TYPE_COPY_SEND;
type mach_port_array_t = array[] of mach_port_t;

type mach_port_name_t = MACH_MSG_TYPE_PORT_NAME
 ctype: mach_port_t;
type mach_port_name_array_t = array[] of mach_port_name_t
 ctype: mach_port_array_t;

type mach_port_right_t = natural_t;

type mach_port_type_t = natural_t;
type mach_port_type_array_t = array[] of mach_port_type_t;

type mach_port_urefs_t = natural_t;
type mach_port_delta_t = integer_t;
type mach_port_seqno_t = natural_t;
type mach_port_mscount_t = unsigned;
type mach_port_msgcount_t = unsigned;
type mach_port_rights_t = unsigned;
type mach_msg_id_t = integer_t;
type mach_msg_type_name_t = unsigned;
type mach_msg_type_number_t = natural_t;

type mach_port_move_receive_t = MACH_MSG_TYPE_MOVE_RECEIVE
 ctype: mach_port_t;
type mach_port_copy_send_t = MACH_MSG_TYPE_COPY_SEND
 ctype: mach_port_t;
type mach_port_make_send_t = MACH_MSG_TYPE_MAKE_SEND
 ctype: mach_port_t;
type mach_port_move_send_t = MACH_MSG_TYPE_MOVE_SEND
 ctype: mach_port_t;
type mach_port_make_send_once_t = MACH_MSG_TYPE_MAKE_SEND_ONCE
 ctype: mach_port_t;
type mach_port_move_send_once_t = MACH_MSG_TYPE_MOVE_SEND_ONCE
 ctype: mach_port_t;

type mach_port_receive_t = MACH_MSG_TYPE_PORT_RECEIVE
 ctype: mach_port_t;
type mach_port_send_t = MACH_MSG_TYPE_PORT_SEND
 ctype: mach_port_t;
type mach_port_send_once_t = MACH_MSG_TYPE_PORT_SEND_ONCE
 ctype: mach_port_t;

type mach_port_poly_t = polymorphic
 ctype: mach_port_t;

import <mach/std_types.h>;
# 48 "./include/mach/mach_host.defs" 2
# 1 "./include/mach/mach_types.defs" 1
# 61 "./include/mach/mach_types.defs"
type mach_port_status_t = struct[9] of integer_t;

type old_mach_port_status_t = struct[8] of integer_t;

type task_t = mach_port_t
  ctype: mach_port_t

  intran: task_t convert_port_to_task(mach_port_t)
  outtran: mach_port_t convert_task_to_port(task_t)
  destructor: task_deallocate(task_t)

  ;
# 85 "./include/mach/mach_types.defs"
type thread_t = mach_port_t
  ctype: mach_port_t

  intran: thread_t convert_port_to_thread(mach_port_t)
  outtran: mach_port_t convert_thread_to_port(thread_t)
  destructor: thread_deallocate(thread_t)

  ;

type thread_state_t = array[*:1024] of natural_t;

type task_array_t = ^array[] of task_t;
type thread_array_t = ^array[] of thread_t;

type vm_task_t = mach_port_t
  ctype: mach_port_t

  intran: vm_map_t convert_port_to_map(mach_port_t)
  destructor: vm_map_deallocate(vm_map_t)

  ;

type ipc_space_t = mach_port_t
  ctype: mach_port_t

  intran: ipc_space_t convert_port_to_space(mach_port_t)
  destructor: space_deallocate(ipc_space_t)

  ;

type vm_address_t = natural_t;
type vm_offset_t = natural_t;
type vm_size_t = natural_t;
type vm_prot_t = int;
type vm_inherit_t = int;
type vm_statistics_data_t = struct[13] of integer_t;
type vm_machine_attribute_t = int;
type vm_machine_attribute_val_t = int;

type thread_info_t = array[*:1024] of integer_t;
type thread_basic_info_data_t = struct[11] of integer_t;
type thread_sched_info_data_t = struct[7] of integer_t;

type task_info_t = array[*:1024] of integer_t;
type task_basic_info_data_t = struct[8] of integer_t;
type task_events_info = struct[7] of natural_t;
type task_thread_times_info_data_t = struct[4] of integer_t;


type memory_object_t = mach_port_t
  ctype: mach_port_t

  intran: ipc_port_t null_conversion(mach_port_t)

  ;

type memory_object_control_t = mach_port_t
  ctype: mach_port_t

  intran: vm_object_t vm_object_lookup(mach_port_t)

  ;

type memory_object_name_t = mach_port_t
  ctype: mach_port_t

  intran: vm_object_t vm_object_lookup_name(mach_port_t)
  destructor: vm_object_deallocate(vm_object_t)

  ;

type memory_object_copy_strategy_t = int;
type memory_object_return_t = int;

type machine_info_data_t = struct[5] of integer_t;
type machine_slot_data_t = struct[8] of integer_t;

type host_t = mach_port_t
  ctype: mach_port_t

  intran: host_t convert_port_to_host(mach_port_t)
  outtran: mach_port_t convert_host_to_port(host_t)

  ;

type host_priv_t = mach_port_t
  ctype: mach_port_t

  intran: host_t convert_port_to_host_priv(mach_port_t)

  ;

type host_info_t = array[*:1024] of integer_t;
type host_basic_info_data_t = struct[5] of integer_t;
type host_sched_info_data_t = struct[2] of integer_t;
type host_load_info_data_t = struct[6] of integer_t;


type processor_t = mach_port_t
  ctype: mach_port_t

  intran: processor_t convert_port_to_processor(mach_port_t)
  outtran: mach_port_t convert_processor_to_port(processor_t)

  ;

type processor_array_t = ^array[] of processor_t;
type processor_info_t = array[*:1024] of integer_t;
type processor_basic_info_data_t = struct[5] of integer_t;


type processor_set_t = mach_port_t
  ctype: mach_port_t

  intran: processor_set_t convert_port_to_pset(mach_port_t)
  outtran: mach_port_t convert_pset_to_port(processor_set_t)
  destructor: pset_deallocate(processor_set_t)

  ;

type processor_set_array_t = ^array[] of processor_set_t;

type processor_set_name_t = mach_port_t
  ctype: mach_port_t

  intran: processor_set_t convert_port_to_pset_name(mach_port_t)
  outtran: mach_port_t convert_pset_name_to_port(processor_set_t)
  destructor: pset_deallocate(processor_set_t)

  ;

type processor_set_name_array_t = ^array[] of processor_set_name_t;

type processor_set_info_t = array[*:1024] of integer_t;
type processor_set_basic_info_data_t = struct[5] of integer_t;
type processor_set_sched_info_data_t = struct[2] of integer_t;


type kernel_version_t = (MACH_MSG_TYPE_STRING, 512*8);

type kernel_boot_info_t = (MACH_MSG_TYPE_STRING, 4096*8);

type time_value_t = struct[2] of integer_t;

type emulation_vector_t = ^array[] of vm_offset_t;

type rpc_signature_info_t = array[*:1024] of int;


simport <kern/ipc_kobject.h>;
simport <kern/ipc_tt.h>;
simport <kern/ipc_host.h>;
simport <kern/task.h>;
simport <kern/thread.h>;
simport <kern/host.h>;
simport <kern/processor.h>;
simport <vm/vm_object.h>;
simport <vm/vm_map.h>;
simport <ipc/ipc_space.h>;


import <mach/mach_types.h>;
# 49 "./include/mach/mach_host.defs" 2





routine host_processors(
  host_priv : host_priv_t;
 out processor_list : processor_array_t);

skip;
skip;





routine processor_start(
  processor : processor_t);





routine processor_exit(
  processor : processor_t);

skip;




routine processor_set_default(
  host : host_t;
 out default_set : processor_set_name_t);

skip;





routine processor_set_create(
  host : host_t;
 out new_set : processor_set_t;
 out new_name : processor_set_name_t);




routine processor_set_destroy(
  set : processor_set_t);

skip;




routine processor_assign(
  processor : processor_t;
  new_set : processor_set_t;
  wait : boolean_t);





routine processor_get_assignment(
  processor : processor_t;
 out assigned_set : processor_set_name_t);




routine thread_assign(
  thread : thread_t;
  new_set : processor_set_t);




routine thread_assign_default(
  thread : thread_t);




routine thread_get_assignment(
  thread : thread_t;
 out assigned_set : processor_set_name_t);




routine task_assign(
  task : task_t;
  new_set : processor_set_t;
  assign_threads : boolean_t);



routine task_assign_default(
  task : task_t;
  assign_threads : boolean_t);




routine task_get_assignment(
  task : task_t;
 out assigned_set : processor_set_name_t);




routine host_kernel_version(
  host : host_t;
 out kernel_version : kernel_version_t);




routine thread_priority(
  thread : thread_t;
  priority : int;
  set_max : boolean_t);




routine thread_max_priority(
  thread : thread_t;
  processor_set : processor_set_t;
  max_priority : int);




routine task_priority(
  task : task_t;
  priority : int;
  change_threads : boolean_t);




routine processor_set_max_priority(
  processor_set : processor_set_t;
  max_priority : int;
  change_threads : boolean_t);




routine thread_policy(
  thread : thread_t;
  policy : int;
  data : int);




routine processor_set_policy_enable(
  processor_set : processor_set_t;
  policy : int);




routine processor_set_policy_disable(
  processor_set : processor_set_t;
  policy : int;
  change_threads : boolean_t);



routine processor_set_tasks(
  processor_set : processor_set_t;
 out task_list : task_array_t);




routine processor_set_threads(
  processor_set : processor_set_t;
 out thread_list : thread_array_t);




routine host_processor_sets(
  host : host_t;
 out processor_sets : processor_set_name_array_t);




routine host_processor_set_priv(
  host_priv : host_priv_t;
  set_name : processor_set_name_t;
 out set : processor_set_t);

routine thread_depress_abort(
  thread : thread_t);





routine host_set_time(
  host_priv : host_priv_t;
  new_time : time_value_t);






routine host_adjust_time(
  host_priv : host_priv_t;
 in new_adjustment : time_value_t;
 out old_adjustment : time_value_t);





routine host_get_time(
  host : host_t;
 out current_time : time_value_t);





routine host_reboot(
  host_priv : host_priv_t;
  options : int);
# 294 "./include/mach/mach_host.defs"
routine vm_wire(
  host_priv : host_priv_t;
  task : vm_task_t;
  address : vm_address_t;
  size : vm_size_t;
  access : vm_prot_t);





routine thread_wire(
  host_priv : host_priv_t;
  thread : thread_t;
  wired : boolean_t);





routine host_info(
  host : host_t;
  flavor : int;
 out host_info_out : host_info_t, CountInOut);





routine processor_info(
  processor : processor_t;
  flavor : int;
 out host : host_t;
 out processor_info_out: processor_info_t, CountInOut);




routine processor_set_info(
  set_name : processor_set_name_t;
  flavor : int;
 out host : host_t;
 out info_out : processor_set_info_t, CountInOut);




routine processor_control(
  processor : processor_t;
  processor_cmd : processor_info_t);




routine host_get_boot_info(
  host_priv : host_priv_t;
 out boot_info : kernel_boot_info_t);
# 37 "kern/mach_host.server.defs.c" 2
